//PLAYFAIR CIPHER
#include <bits/stdc++.h>
using namespace std;

string toLowerCase(string plain)
{
    for (int i = 0; i < plain.size(); i++) {
		if (plain[i] > 64 && plain[i] < 91)
			plain[i] += 32;
	}
	cout<<"lowercase: "<<plain<<endl;
	return plain;
}

string removeSpaces(string plain)
{
    int i, count = 0;
    
    for (i = 0; i < plain.size(); i++)
        if (plain[i] != ' ')
            plain[count++] = plain[i];
            
    string s="";
    for(int i=0;i<count;i++)
        s+=plain[i];
    cout<<"removespaces: "<<s<<endl;
    
    return s;
}

string prepare(string ptrs)
{
    cout<<"ptrs size: "<<ptrs.size()<<endl;
    for(int i=1;i<ptrs.size();i++)
    {
        if(ptrs[i-1]==ptrs[i]){
            ptrs.insert(i,"x");
            continue;
        }
    }
    cout<<"ptrs size: "<<ptrs.size()<<endl;
    if ((ptrs.size() % 2) != 0) {
        ptrs += 'z';
    }
    cout<<"prepare: "<<ptrs<<endl;
    return ptrs;
}

void generateTable(string key, char keyT[5][5])
{
    int i, j, k, flag = 0;
    //cout<<"Inside generate"<<endl;
    //cout<<"key size: "<<key.size()<<endl;
    // a 26 character hashmap
    // to store count of the alphabet
    int dicty[26] = { 0 };
    for (i = 0; i < key.size(); i++) {
        if (key[i] != 'j')
            dicty[key[i] - 97] = 2;
    }
 
    dicty['j' - 97] = 1;
 
    i = 0;
    j = 0;
 
    for (k = 0; k < key.size(); k++) {
        if (dicty[key[k] - 97] == 2) {
            dicty[key[k] - 97] -= 1;
            keyT[i][j] = key[k];
            j++;
            if (j == 5) {
                i++;
                j = 0;
            }
        }
    }
 
    for (k = 0; k < 26; k++) {
        if (dicty[k] == 0) {
            keyT[i][j] = (char)(k + 97);
            j++;
            if (j == 5) {
                i++;
                j = 0;
            }
        }
    }
    for(int i=0;i<5;i++)
    {
        for(int j=0;j<5;j++)
            cout<<keyT[i][j]<<" ";
        cout<<endl;
    }
}

int mod5(int a) { return (a % 5); }

void search(char keyT[5][5], char a, char b, int arr[])
{
    int i, j;
 
    if (a == 'j')
        a = 'i';
    else if (b == 'j')
        b = 'i';
 
    for (i = 0; i < 5; i++) {
 
        for (j = 0; j < 5; j++) {
 
            if (keyT[i][j] == a) {
                arr[0] = i;
                arr[1] = j;
            }
            else if (keyT[i][j] == b) {
                arr[2] = i;
                arr[3] = j;
            }
        }
    }
}
string encrypt(string str, char keyT[5][5])
{
    int i, a[4];
    cout<<"before encrypt: "<<str<<endl;
    for (i = 0; i < str.size()-1; i += 2) {
 
        search(keyT, str[i], str[i + 1], a);
 
        if (a[0] == a[2]) {
            str[i] = keyT[a[0]][mod5(a[1] + 1)];
            str[i + 1] = keyT[a[0]][mod5(a[3] + 1)];
        }
        else if (a[1] == a[3]) {
            str[i] = keyT[mod5(a[0] + 1)][a[1]];
            str[i + 1] = keyT[mod5(a[2] + 1)][a[1]];
        }
        else {
            str[i] = keyT[a[0]][a[3]];
            str[i + 1] = keyT[a[2]][a[1]];
        }
    }
    cout<<"after encrypt: "<<str<<endl;
    return str;
}
string encryptBy(string str,string key)
{
    char keyT[5][5];
    int ps,ks;
    
    key=removeSpaces(key);
    key=toLowerCase(key);
    
    str=removeSpaces(str);
    str=toLowerCase(str);
    
    str=prepare(str);
    generateTable(key,keyT);
    
    str=encrypt(str,keyT);
    return str;
}
int main()
{
    string str,key;
    
    cout << "Plain text: ";
    getline (cin, str);
    cout<< " Enter key: ";
    cin>>key;
    
    str=encryptBy(str,key);
    
    cout<<"Cipher text: "<<str;
    return 0;
}